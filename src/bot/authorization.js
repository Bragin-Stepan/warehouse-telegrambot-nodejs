import axios from 'axios';

import { PASSWORD, SERVER_URL_USERS, markupWithActions } from '../constants.js';

import { logger } from '../utils/logger.js';

export let isUserAdded = false;

export const authorization = async ctx => {
  const userId = ctx.from.id;
  const userName = ctx.from.first_name;
  const passwordAttempt = ctx.message.text;

  let attempt–°ounter = 0; // –ø—É—Å—Ç—å –±—É–¥–µ—Ç :D

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  try {
    logger.info('Checking the user...');
    await axios.get(`${SERVER_URL_USERS}/${userId}`); // –ï—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å?
    isUserAdded = true;
    logger.info('The user was successfully found');
  } catch (error) {
    logger.info('The user is not in the database yet');
    if (error.response && error.response.status === 404) {
    } else {
      logger.error('Error checking the users existence:', error);
      ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–∂–µ.'
      );
      return;
    }
  }
  if (isUserAdded) {
    ctx.session.authenticated = true;
    ctx.reply('‚úÖ –¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–∞–Ω–µ–µ!');
    ctx.reply('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: markupWithActions,
    });
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å
    if (passwordAttempt === PASSWORD) {
      logger.info('The password has been entered successfully');
      try {
        logger.info('Sending an authorized user to the server...');
        await axios.post(SERVER_URL_USERS, {
          id: userId,
          userId: userId,
          userName: userName,
        });
        ctx.session.authenticated = true;
        logger.info('[+] The user has successfully logged in');
        ctx.reply('‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é!');
        ctx.reply('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', {
          reply_markup: markupWithActions,
        });
        return;
      } catch (error) {
        logger.error('Password verification error:', error);
        ctx.reply(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
      }
    } else {
      logger.info('[x] The password was entered incorrectly');
      attempt–°ounter = attempt–°ounter + 1;
      if (attempt–°ounter < 3) {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
      } else if (attempt–°ounter <= 5) {
        ctx.reply('‚ùå –ù–µ–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!');
      } else if (attempt–°ounter === 6) {
        ctx.reply('–ú–æ–∂–µ—Ç –ª—É—á—à–µ –ø–∏–≤–∫–∞ üçª, –∞ –Ω–µ –≤–æ—Ç —ç—Ç–æ –≤–æ—Ç –≤—Å–µ?');
      } else {
        ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å‚ùó ‚ùå');
      }
    }
  }
};
